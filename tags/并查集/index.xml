<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>并查集 on 钛合金伞的隙间</title>
        <link>https://blog.tibrella.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
        <description>Recent content in 并查集 on 钛合金伞的隙间</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 17 Jan 2023 15:11:36 +0000</lastBuildDate><atom:link href="https://blog.tibrella.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>并查集</title>
        <link>https://blog.tibrella.top/post/2022-1-17-%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
        <pubDate>Tue, 17 Jan 2023 15:11:36 +0000</pubDate>
        
        <guid>https://blog.tibrella.top/post/2022-1-17-%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
        <description>&lt;img src="http://mms1.baidu.com/it/u=1792239625,2233250434&fm=253&app=138&f=JPEG" alt="Featured image of post 并查集" /&gt;&lt;p&gt;今天讲的最短路啥的感觉有点费劲，先把并查集的东西写了&lt;/p&gt;
&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;
&lt;p&gt;基本上用来处理 &lt;strong&gt;关系&lt;/strong&gt;&lt;br /&gt;
什么是关系？比如一个人和他的表弟是亲戚，亲戚的关系可以人为理清，
但是&lt;del&gt;毒瘤的&lt;/del&gt;出题人会给这个人安上 114514 个表弟这些表弟的
1919810 个其他亲戚以及 1145141919810
个其他无关的人，然后问你这个序列里面第 &lt;span
class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 个人和第 &lt;span
class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;
个人是不是亲戚，一般的方法显然处理不了，而并查集就是专门用来解决这种东西用的。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;“并查集”的操作就是前两个字，即合并与查询。&lt;br /&gt;
此处默认以树实现并查集。&lt;/p&gt;
&lt;h3 id=&#34;合并&#34;&gt;合并&lt;/h3&gt;
&lt;p&gt;合并的操作即把两棵树的根节点连接在一起，文字解释不清楚，但是直接用树结构实现就比较清楚了。&lt;/p&gt;
&lt;p&gt;这里我们只需要开一个数组 &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt;
存储每一个节点的祖先，每次更改 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;
节点的祖先只需要修改 &lt;span class=&#34;math inline&#34;&gt;\(F_i\)&lt;/span&gt; 的值&lt;/p&gt;
&lt;p&gt;比如目前我们有五个点&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c64e44be43e0d30eb8b23d.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后由输入数据可知，&lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;3&lt;/code&gt;，&lt;code&gt;2&lt;/code&gt;
和 &lt;code&gt;4&lt;/code&gt;，&lt;code&gt;5&lt;/code&gt; 和 &lt;code&gt;4&lt;/code&gt;，&lt;code&gt;4&lt;/code&gt; 和
&lt;code&gt;1&lt;/code&gt; 是亲戚，于是我们把 &lt;code&gt;1&lt;/code&gt; 设为 &lt;code&gt;5&lt;/code&gt;
的祖先来表示他们的关系， &lt;code&gt;2&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;
同理，相当于把这四个集合（或者说树）两两合并&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c65028be43e0d30ebcaa53.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下一步&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c6526dbe43e0d30ec1760c.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以及把以 &lt;code&gt;4&lt;/code&gt; 为根的这棵树合并到 &lt;code&gt;1&lt;/code&gt;
上，连接他们的根节点&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c657d0be43e0d30ecda861.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样我们就基本完成了这个集合的初始化，我们只需要再把根节点
&lt;code&gt;1&lt;/code&gt;
的祖先设置为自己，来表示它是这棵树的根节点（应该在合并之前初始化每一个结点的祖先为自己，因为图可能会不太清楚所以改到这里了）&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c6595cbe43e0d30ed06172.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;代码实现思路就很清楚了&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre
class=&#34;sourceCode c++&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; uni&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; y&lt;span class=&#34;op&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;// 查询两个节点所在树的根&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    xx &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;u&lt;span class=&#34;op&#34;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    yy &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;op&#34;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;xx &lt;span class=&#34;op&#34;&gt;!=&lt;/span&gt; yy&lt;span class=&#34;op&#34;&gt;)&lt;/span&gt; f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;xx&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; yy&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;//连接根节点&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;int main() {&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    .....&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n; // m 为人数，n 为关系数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    int f[m+10], u, v;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    int p,q;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    memset(f,0,sizeof 0);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    for (int i = 1; i &amp;lt;= m; ++i) {&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;        f[i] = i;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;查找&#34;&gt;查找&lt;/h3&gt;
&lt;p&gt;假如我们需要查找上一张图里面 &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt;
是否是亲戚，如何操作呢？&lt;/p&gt;
&lt;p&gt;很容易发现，&lt;code&gt;2&lt;/code&gt;
&lt;code&gt;3&lt;/code&gt;两个节点在同一棵树中，也就是说我们可以直接查找这两个节点的根节点，如果相同则是亲戚。查找的实现也很简单，直接递归寻找上一级的父亲节点，如果一个节点的祖先是自己，就直接输出这个节点即可&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre
class=&#34;sourceCode c++&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// 查询 pos 的根&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; pos&lt;span class=&#34;op&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;pos&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; pos&lt;span class=&#34;op&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; pos&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// 边界&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;father&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;pos&lt;span class=&#34;op&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;p&gt;由上文可以发现，在并查集中查找一个节点的祖先最坏情况下的时间复杂度是
&lt;span class=&#34;math inline&#34;&gt;\(O(h)\)&lt;/span&gt; 的（&lt;span
class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;
为树的最大深度），那么就可以通过减小最大深度来优化并查集。&lt;/p&gt;
&lt;h3 id=&#34;按树的大小合并&#34;&gt;按树的大小合并&lt;/h3&gt;
&lt;p&gt;假如说我们有这样两棵树&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c66020be43e0d30edcc678.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现在 &lt;code&gt;1&lt;/code&gt; &lt;code&gt;5&lt;/code&gt;两个节点是亲戚，那么把
&lt;code&gt;5&lt;/code&gt; 的祖先设为 &lt;code&gt;1&lt;/code&gt; 合适还是反过来合适呢？&lt;br /&gt;
显然是前者&lt;/p&gt;
&lt;p&gt;如果按照前者合并，结果就是&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c66135be43e0d30edef9df.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最大深度是 3&lt;/p&gt;
&lt;p&gt;如果按照后者合并，最大深度为 4&lt;/p&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c66158be43e0d30edf4e8c.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也就是说，为了让 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;
尽可能地小，需要把深度/体积小的树合并到深度大的树上，作为大深度/体积树的子树&lt;/p&gt;
&lt;p&gt;此处定义一个 &lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; 数组记录以 &lt;span
class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为根节点的树的最大深度为 &lt;span
class=&#34;math inline&#34;&gt;\(R_i\)&lt;/span&gt; （&lt;span
class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; 的修改在初始化/添加关系时修改）&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre
class=&#34;sourceCode c++&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; uni&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; y&lt;span class=&#34;op&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; xx &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;op&#34;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; yy &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;op&#34;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;xx &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; yy&lt;span class=&#34;op&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// 在同一棵树中不需要合并&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;xx&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;yy&lt;span class=&#34;op&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;        f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;yy&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; xx&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;        r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;xx&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; max&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;xx&lt;span class=&#34;op&#34;&gt;],&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;yy&lt;span class=&#34;op&#34;&gt;]+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// 可能合并后 y 树深度 +1 大于 x 树最大深度&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;        f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;xx&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; yy&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;        r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;yy&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; max&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;yy&lt;span class=&#34;op&#34;&gt;],&lt;/span&gt;r&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;xx&lt;span class=&#34;op&#34;&gt;]+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;路径压缩&#34;&gt;路径压缩&lt;/h3&gt;
&lt;p&gt;&lt;img
src=&#34;https://pic.imgdb.cn/item/63c66407be43e0d30ee5216d.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上两棵树显然右侧的树更优，因为它的最大深度更小&lt;/p&gt;
&lt;p&gt;并查集的查询方式为“查询根节点”，这意味着我们查询时只需要关注查询最终的根节点，而不用关心查询途中经过的节点，这就是路径压缩的原理。路径压缩即把一个没有连着根的节点（如上图左侧的&lt;code&gt;4&lt;/code&gt;
&lt;code&gt;5&lt;/code&gt; &lt;code&gt;6&lt;/code&gt;
&lt;code&gt;7&lt;/code&gt;），“跳过”所有中间节点，直接把它连到根节点上。&lt;br /&gt;
对于上图来说，就是把 &lt;code&gt;4&lt;/code&gt; &lt;code&gt;5&lt;/code&gt; &lt;code&gt;6&lt;/code&gt;
&lt;code&gt;7&lt;/code&gt; 摘出来连接到 &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; 的父节点上，即
&lt;code&gt;1&lt;/code&gt;，于是形成了右图，最大深度从 2 降到了 1。
由于并查集相关的题目中可能初始化之后仍然有需要增删的元素，同时路径压缩也需要耗费时间，所以我们只在查询需要的点时优化。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre
class=&#34;sourceCode c++&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;op&#34;&gt;!=&lt;/span&gt; f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;op&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// 如果 x 不是根节点&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;        f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;op&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; find&lt;span class=&#34;op&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;op&#34;&gt;]);&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; f&lt;span class=&#34;op&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;op&#34;&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34; aria-hidden=&#34;true&#34; tabindex=&#34;-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新的查询函数可以结合上图理解。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
